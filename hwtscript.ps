# Function to display loading animation with progress percentage
function Show-Loading {
    param([string]$message, [int]$progress)
    Write-Host -NoNewline $message
    $animationChars = "-\|/"
    $animation = $animationChars[$progress % $animationChars.Length]
    Write-Host -NoNewline ("`r[$animation] Progress: $progress%")
}

# Function to stop the loading animation
function Stop-Loading {
    Write-Host "`r`r"  # Clear the loading animation line
}

# Define the ASCII art and author's name
$asciiArt = @"
 _       ___          ______          __     ____           ___    __    _    ________  ___                
| |     / (_)___     /_  __/__  _____/ /_   / __ )__  __   /   |  / /   (_)  / ____/  |/  /___ __________ _
| | /| / / / __ \     / / / _ \/ ___/ __/  / __  / / / /  / /| | / /   / /  / __/ / /|_/ / __ `/ ___/ __ `/
| |/ |/ / / / / /    / / /  __(__  ) /_   / /_/ / /_/ /  / ___ |/ /___/ /  / /___/ /  / / /_/ / /  / /_/ / 
|__/|__/_/_/ /_/    /_/  \___/____/\__/  /_____/\__, /  /_/  |_/_____/_/  /_____/_/  /_/\__,_/_/   \__,_/  
                                               /____/                                                      
"@
$author = "Author: Ali Emara"

# Display the ASCII art and author's name
Write-Host $asciiArt
Write-Host $author
Write-Host

# Display introduction
Write-Host "Welcome to the Comprehensive Hardware Health Check Script"
Read-Host "Press Enter to continue..."

# Get all physical drives using Win32_DiskDrive
$physicalDrives = Get-WmiObject -Class Win32_DiskDrive | Where-Object { $_.MediaType -eq "Fixed hard disk media" }
$totalDrives = $physicalDrives.Count

if ($totalDrives -eq 0) {
    Write-Host "No physical drives with 'Fixed hard disk media' found on the system."
} else {
    foreach ($drive in $physicalDrives) {
        Show-Loading "Checking hard drive health for drive $($drive.Index)..." $progress
        $driveInfo = Get-WmiObject -Class Win32_DiskDrive -Filter "Index = $($drive.Index)"
        Stop-Loading

        if ($driveInfo) {
            $status = $driveInfo.Status
            $healthStatus = if ($status -eq "OK") { "good" } else { "not optimal" }
            Write-Host "Hard drive health is $healthStatus. Status: $status"
        } else {
            Write-Host "Could not retrieve drive information for drive $($drive.Index)."
        }
        Write-Host  # Add a new line after each drive's progress update
    }
}

# Check system event logs for critical errors and write to a file
$eventLogErrors = Get-WinEvent -LogName System -MaxEvents 10 | Where-Object { $_.LevelDisplayName -eq "Critical" }
if ($eventLogErrors) {
    $logFilePath = "EventlogsErrors.txt"
    $eventLogErrors | ForEach-Object {
        $logMessage = "Date: $($_.TimeCreated) | Source: $($_.ProviderName) | Event ID: $($_.Id) | Message: $($_.Message)"
        $logMessage | Out-File -Append -FilePath $logFilePath
    }
    $logFilePath  # Print the path of the log file
} else {
    Write-Host "No critical errors found in system event logs."
}
Stop-Loading

# Check network connectivity to Google
Show-Loading "Checking network connectivity to Google..." 60
$pingResult = Test-Connection -ComputerName google.com -Count 3 -ErrorAction SilentlyContinue
if ($pingResult) {
    Write-Host "Network connectivity to Google is successful. Round-trip time: $($pingResult | Measure-Object ResponseTime -Minimum).Minimum ms"
} else {
    Write-Host "Network connectivity to Google failed."
}
Stop-Loading

# Check for installed drivers
Show-Loading "Checking installed drivers..." 80
$drivers = Get-WmiObject -Class Win32_PnPSignedDriver
if ($drivers.Count -gt 0) {
    Write-Host "Installed drivers:"
    $drivers | ForEach-Object {
        Write-Host ("Device: $($_.DeviceName) | Driver Name: $($_.DriverName) | Status: $($_.Status)")
    }
} else {
    Write-Host "No drivers found."
}
Stop-Loading

# Display memory test information
Write-Host "Before running the memory test, please save your work."
Write-Host "The next step involves running the Windows Memory Diagnostic, which requires a system restart."
Read-Host "Press Enter to continue..."

# Write thanks for user
Write-Host "Thank you for using the script! Your hardware health checks are complete."
